<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\obj\smart_tags_m0.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\obj\smart_tags_m0.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Thu Nov 26 17:27:08 2015
<BR><P>
<H3>Maximum Stack Usage =       1504 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; tag_app_sync_pkt &rArr; App_Write_RecvProcess &rArr; App_RecvWriteScreenReq &rArr; Write_EPaper &rArr; store_usr_gui_to_flash &rArr; store_gui_page &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[22]">CEC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from stm32f0xx_it.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from stm32f0xx_it.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from stm32f0xx_it.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f0xx_it.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1c]">I2C1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1d]">I2C2_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[2b]">InventoryMode_Key_Confirm</a> from app_usr_function.o(.text) referenced from app_key.o(.text)
 <LI><a href="#[2c]">InventoryMode_Key_Plus</a> from app_usr_function.o(.text) referenced from app_key.o(.text)
 <LI><a href="#[2d]">InventoryMode_Key_minus</a> from app_usr_function.o(.text) referenced from app_key.o(.text)
 <LI><a href="#[2e]">InventoryMode_Key_mode</a> from app_usr_function.o(.text) referenced from app_key.o(.text)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f0xx_it.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32f0xx_it.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[a]">RCC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from stm32f0xx_it.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1e]">SPI1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1f]">SPI2_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32f0xx_it.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32f0xx_it.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from system_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(.text)
 <LI><a href="#[18]">TIM14_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[19]">TIM15_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1a]">TIM16_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1b]">TIM17_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[13]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[14]">TIM1_CC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[15]">TIM2_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[16]">TIM3_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[17]">TIM6_DAC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[e]">TS_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[20]">USART1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[21]">USART2_IRQHandler</a> from bsp_usart2.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[25]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f0xx.o(.text)
 <LI><a href="#[2f]">_sputc</a> from printf5.o(i._sputc) referenced from printf5.o(i.__0sprintf$5)
 <LI><a href="#[26]">key_reset_system</a> from app_key.o(.text) referenced from app_key.o(.text)
 <LI><a href="#[23]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[27]">put_key_to_set_all_led_off</a> from app_key.o(.text) referenced from app_key.o(.text)
 <LI><a href="#[29]">turn_gui_pages</a> from app_gui.o(.text) referenced from app_key.o(.text)
 <LI><a href="#[2a]">usr_key_event_report</a> from app_usr_function.o(.text) referenced from app_key.o(.text)
 <LI><a href="#[28]">yest_led</a> from pmw_led.o(.text) referenced from app_key.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(.text)
</UL>
<P><STRONG><a name="[16f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[30]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[16c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[170]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[171]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[172]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[173]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[174]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>main</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = main &rArr; tag_app_sync_pkt &rArr; App_Write_RecvProcess &rArr; App_RecvWriteScreenReq &rArr; Write_EPaper &rArr; store_usr_gui_to_flash &rArr; store_gui_page &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_self_test
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_app_sync_pkt
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_Goto_sleep
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_tag_logo
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_change
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_detect_Run
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100us
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_init_process
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Maintance
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_stm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_InitTEST
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, system_stm32f0xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; SysTime_handle &rArr; len_on_timer_handler &rArr; turn_all_led_off &rArr; Set_LedOff
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTime_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f0xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = EXTI0_1_IRQHandler &rArr; a7139_recv_handle &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_recv_handle
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f0xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = EXTI2_3_IRQHandler &rArr; WakeUp_Init &rArr; USART2_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f0xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = EXTI4_15_IRQHandler &rArr; WakeUp_Init &rArr; USART2_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f0xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = RTC_IRQHandler &rArr; WakeUp_Init &rArr; USART2_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SysTick_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysTick_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_InitTEST
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[41]"></a>SysTime_handle</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTime_handle &rArr; len_on_timer_handler &rArr; turn_all_led_off &rArr; Set_LedOff
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_on_timer_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longdata_wait_timer_handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len_on_timer_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4f]"></a>Delay_ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>

<P><STRONG><a name="[35]"></a>Delay100us</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Delay100us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_test_wait_key
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_wake_up_from_sleep_mode
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_entry_sleep_mode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WOR_disable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EPaper
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRF
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_self_test
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_detect_Run
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_init_process
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csma_detect
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cca_detect
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFEN_Action
</UL>

<P><STRONG><a name="[50]"></a>Rcc_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Rcc_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_InitTEST
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[175]"></a>Rcc_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>Set_LedOn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_LedOn
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ledn_on
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_toggle
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_led
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_play_led
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_self_test
</UL>

<P><STRONG><a name="[56]"></a>Set_LedOff</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_LedOff
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_toggle
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_all_led_off
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_play_led
</UL>

<P><STRONG><a name="[58]"></a>dis_play_led</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LedOff
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LedOn
</UL>

<P><STRONG><a name="[59]"></a>turn_all_led_off</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = turn_all_led_off &rArr; Set_LedOff
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LedOff
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len_on_timer_handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_self_test
</UL>

<P><STRONG><a name="[5a]"></a>turn_on_led</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LedOn
</UL>

<P><STRONG><a name="[5b]"></a>Led_toggle</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Led_toggle &rArr; Set_LedOff
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LedOff
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LedOn
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cale_send_and_recv
</UL>

<P><STRONG><a name="[5c]"></a>LED_Init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[5e]"></a>Key_ReadValue</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[60]"></a>Button_Init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Button_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[61]"></a>EP12865_IO_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EP12865_IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP12864_Init
</UL>

<P><STRONG><a name="[62]"></a>EP12864_IO_SetBit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EP12864_IO_SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EPaper
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_out
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_out
</UL>

<P><STRONG><a name="[63]"></a>EP12864_IO_RstBit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EPaper
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_out
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_out
</UL>

<P><STRONG><a name="[64]"></a>EP12864_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EP12864_Init &rArr; EP12865_IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP12865_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[65]"></a>Power_ADC_Init</STRONG> (Thumb, 334 bytes, Stack size 96 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Power_ADC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VrefintCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VbatCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StopOfConversion
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartOfConversion
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationFactor
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestModeConfig
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelConfig
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetEnergy
</UL>

<P><STRONG><a name="[76]"></a>nvic_rf_rx</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[78]"></a>GPIO_Exti_Init</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_Exti_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[7b]"></a>IAP_Set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IAP_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_MemoryRemapConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[102]"></a>system_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_app_update
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_reset_system
</UL>

<P><STRONG><a name="[33]"></a>Board_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Board_Init &rArr; RTC_LSE_Config &rArr; RTC_setTime &rArr; RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_sleep_mode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSE_Config
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EPaper
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRF
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Set
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Exti_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP12864_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcc_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>USART2_Init</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, bsp_usart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USART2_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_Init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>USART2_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_usart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>USART2_Send</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, bsp_usart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_print
</UL>

<P><STRONG><a name="[8f]"></a>RTC_AlarmCmd</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, usr_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_AlarmCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseRTC_Alarm
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRTC_Alarm
</UL>

<P><STRONG><a name="[90]"></a>RTC_ITConfig</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, usr_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRTC_Alarm
</UL>

<P><STRONG><a name="[47]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usr_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRTC_Alarm
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>RTC_SetAlarm</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, usr_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRTC_Alarm
</UL>

<P><STRONG><a name="[8e]"></a>ConfigRTC_Alarm</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, usr_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ConfigRTC_Alarm &rArr; RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmCmd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_alarm_Interrupt
</UL>

<P><STRONG><a name="[91]"></a>CloseRTC_Alarm</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usr_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CloseRTC_Alarm &rArr; RTC_AlarmCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_alarm_Interrupt
</UL>

<P><STRONG><a name="[92]"></a>RTC_GetTime</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usr_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_alarm_Interrupt
</UL>

<P><STRONG><a name="[96]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, usr_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSE_Config
</UL>

<P><STRONG><a name="[95]"></a>RTC_ExitInitMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usr_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[94]"></a>RTC_EnterInitMode</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, usr_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[93]"></a>RTC_SetTime</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, usr_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_setTime
</UL>

<P><STRONG><a name="[97]"></a>RTC_setTime</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usr_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RTC_setTime &rArr; RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSE_Config
</UL>

<P><STRONG><a name="[98]"></a>RTC_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usr_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSE_Config
</UL>

<P><STRONG><a name="[7f]"></a>RTC_LSE_Config</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, usr_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RTC_LSE_Config &rArr; RTC_setTime &rArr; RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_setTime
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_alarm_Interrupt
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[9e]"></a>generate_alarm_Interrupt</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usr_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = generate_alarm_Interrupt &rArr; RTC_LSE_Config &rArr; RTC_setTime &rArr; RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRTC_Alarm
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSE_Config
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep_s
</UL>

<P><STRONG><a name="[9f]"></a>cancel_alarm_Interrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usr_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cancel_alarm_Interrupt &rArr; CloseRTC_Alarm &rArr; RTC_AlarmCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseRTC_Alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRF_turn
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep_wakeBy_WorAndKey
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep_s
</UL>

<P><STRONG><a name="[46]"></a>RTC_GetITStatus</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usr_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>WakeUp_InitTEST</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usr_lowpower.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcc_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[42]"></a>WakeUp_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usr_lowpower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = WakeUp_Init &rArr; USART2_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_GPIO_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagState
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagInfo
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_sleep_mode
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EPaper
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP12864_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcc_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>SystemSleep_s</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usr_lowpower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SystemSleep_s &rArr; generate_alarm_Interrupt &rArr; RTC_LSE_Config &rArr; RTC_setTime &rArr; RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_print
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_wake_up_from_sleep_mode
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_entry_sleep_mode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_alarm_Interrupt
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_alarm_Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_Goto_sleep
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Run
</UL>

<P><STRONG><a name="[aa]"></a>SystemSleep_wakeBy_WorAndKey</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usr_lowpower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SystemSleep_wakeBy_WorAndKey &rArr; WOR_enable_by_sync &rArr; RCOSC_Cal &rArr; A7139_ReadPageA &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_print
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WOR_enable_by_sync
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WOR_disable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_alarm_Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_self_test
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_Goto_sleep
</UL>

<P><STRONG><a name="[ae]"></a>crc_step</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, crc16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc_step
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc16
</UL>

<P><STRONG><a name="[af]"></a>crc_finish</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, crc16.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc16
</UL>

<P><STRONG><a name="[ad]"></a>cal_crc16</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, crc16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cal_crc16 &rArr; crc_step
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_finish
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_step
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_app_update
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Send_Msg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_qrcode
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_recv_handle
</UL>

<P><STRONG><a name="[b0]"></a>item_show_msg</STRONG> (Thumb, 242 bytes, Stack size 688 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = item_show_msg &rArr; Write_GUI &rArr; Write_EPaper_GUI &rArr; lcd_sleep_mode &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_GUI
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graph_Change
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yest_led
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_test_wait_key
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_qrcode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_recv_time_dis
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sleep_time
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_test_print
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_self_test
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_init_process
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Run
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Join_Run
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Find_Run
</UL>

<P><STRONG><a name="[b8]"></a>get_test_recv_time</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendBuzziEventRsp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_test_print
</UL>

<P><STRONG><a name="[b5]"></a>tag_test_print</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = tag_test_print &rArr; item_show_msg &rArr; Write_GUI &rArr; Write_EPaper_GUI &rArr; lcd_sleep_mode &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_test_recv_time
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_show_msg
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvAckRsp
</UL>

<P><STRONG><a name="[b9]"></a>display_sleep_time</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_show_msg
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[bb]"></a>test_recv_time_dis</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_show_msg
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[bc]"></a>test_recv_time</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = test_recv_time
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendBuzziEventRsp
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Listen_Run
</UL>

<P><STRONG><a name="[bd]"></a>display_qrcode</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graph_Change
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_show_msg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc16
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[be]"></a>tag_test_wait_key</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, engineer_mode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = tag_test_wait_key &rArr; item_show_msg &rArr; Write_GUI &rArr; Write_EPaper_GUI &rArr; lcd_sleep_mode &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_reset_system
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_show_msg
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100us
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_self_test
</UL>

<P><STRONG><a name="[bf]"></a>cale_send_and_recv</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, engineer_mode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cale_send_and_recv &rArr; Led_toggle &rArr; Set_LedOff
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_toggle
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_recv_handle
</UL>

<P><STRONG><a name="[36]"></a>tag_self_test</STRONG> (Thumb, 594 bytes, Stack size 72 bytes, engineer_mode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = tag_self_test &rArr; tag_test_wait_key &rArr; item_show_msg &rArr; Write_GUI &rArr; Write_EPaper_GUI &rArr; lcd_sleep_mode &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_reset_system
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetEnergy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_SetChn
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Send_Msg
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_test_wait_key
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_show_msg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep_wakeBy_WorAndKey
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_all_led_off
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LedOn
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100us
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, pmw_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_LED_On
</UL>

<P><STRONG><a name="[c6]"></a>TIM_OC1Init</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, pmw_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_LED_On
</UL>

<P><STRONG><a name="[c7]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pmw_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmw_led_off
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_LED_On
</UL>

<P><STRONG><a name="[c8]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pmw_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmw_led_off
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_LED_On
</UL>

<P><STRONG><a name="[176]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pmw_led.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>PWM_LED_On</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, pmw_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = PWM_LED_On &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yest_led
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmw_led_on
</UL>

<P><STRONG><a name="[c9]"></a>pmw_led_on</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pmw_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_LED_On
</UL>

<P><STRONG><a name="[ca]"></a>pmw_led_off</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pmw_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[28]"></a>yest_led</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, pmw_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = yest_led &rArr; item_show_msg &rArr; Write_GUI &rArr; Write_EPaper_GUI &rArr; lcd_sleep_mode &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_LED_On
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_show_msg
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_key.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>App_SendNetworkSearchMsg</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, app_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = App_SendNetworkSearchMsg &rArr; RfSendPacket &rArr; A7139_Send_Msg &rArr; csma_detect &rArr; cca_detect &rArr; A7139_GetRSSI &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendPacket
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Find_Run
</UL>

<P><STRONG><a name="[cd]"></a>App_RecvNetworkSearchMsgRsp</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, app_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = App_RecvNetworkSearchMsgRsp &rArr; update_find_NetWorkInfo &rArr; Flash_SaveTagInfo &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_find_NetWorkInfo
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_app_sync_pkt
</UL>

<P><STRONG><a name="[cf]"></a>App_SendJoinRequestMsg</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, app_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = App_SendJoinRequestMsg &rArr; RfSendPacket &rArr; A7139_Send_Msg &rArr; csma_detect &rArr; cca_detect &rArr; A7139_GetRSSI &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendPacket
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Join_Run
</UL>

<P><STRONG><a name="[d0]"></a>App_RecvJoinRequestMsgRsp</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, app_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = App_RecvJoinRequestMsgRsp &rArr; update_join_NetWorkInfo &rArr; Flash_SaveTagInfo &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_join_NetWorkInfo
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRF_turn
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_print
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_app_sync_pkt
</UL>

<P><STRONG><a name="[e2]"></a>App_RecvStandByMsgRsp</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, app_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = App_RecvStandByMsgRsp &rArr; App_recvAckRsp &rArr; tag_app_update &rArr; Flash_SaveTagInfo &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvQueryRsp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvAckRsp
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_app_sync_pkt
</UL>

<P><STRONG><a name="[e3]"></a>App_SendEventRsp</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, app_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = App_SendEventRsp &rArr; RfSendPacket &rArr; A7139_Send_Msg &rArr; csma_detect &rArr; cca_detect &rArr; A7139_GetRSSI &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendPacket
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendEventRspMsg
</UL>

<P><STRONG><a name="[e4]"></a>App_SendRetransReqMsg</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, app_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = App_SendRetransReqMsg &rArr; RfSendPacket &rArr; A7139_Send_Msg &rArr; csma_detect &rArr; cca_detect &rArr; A7139_GetRSSI &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendPacket
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Standby_Run
</UL>

<P><STRONG><a name="[e5]"></a>App_SendQueryMsg</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, app_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = App_SendQueryMsg &rArr; RfSendPacket &rArr; A7139_Send_Msg &rArr; csma_detect &rArr; cca_detect &rArr; A7139_GetRSSI &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendPacket
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Standby_Run
</UL>

<P><STRONG><a name="[e6]"></a>App_SendTransparentMsg</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, app_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = App_SendTransparentMsg &rArr; RfSendPacket &rArr; A7139_Send_Msg &rArr; csma_detect &rArr; cca_detect &rArr; A7139_GetRSSI &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendPacket
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendEventRspMsg
</UL>

<P><STRONG><a name="[e7]"></a>App_SendBuzziEventRsp</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, app_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = App_SendBuzziEventRsp &rArr; RfSendPacket &rArr; A7139_Send_Msg &rArr; csma_detect &rArr; cca_detect &rArr; A7139_GetRSSI &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendPacket
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_recv_time
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_test_recv_time
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendEventRspMsg
</UL>

<P><STRONG><a name="[e8]"></a>App_SendEventRspMsg</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, app_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = App_SendEventRspMsg &rArr; App_SendBuzziEventRsp &rArr; RfSendPacket &rArr; A7139_Send_Msg &rArr; csma_detect &rArr; cca_detect &rArr; A7139_GetRSSI &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendBuzziEventRsp
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendTransparentMsg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendEventRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Standby_Run
</UL>

<P><STRONG><a name="[e9]"></a>App_RecvWriteFirmwareToflash</STRONG> (Thumb, 380 bytes, Stack size 104 bytes, app_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = App_RecvWriteFirmwareToflash &rArr; store_software_copy &rArr; Flash_Write &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ack_info
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_check_cal32
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_software_copy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_print
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write_RecvProcess
</UL>

<P><STRONG><a name="[ec]"></a>App_RecvWriteScreenReq</STRONG> (Thumb, 262 bytes, Stack size 72 bytes, app_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = App_RecvWriteScreenReq &rArr; Write_EPaper &rArr; store_usr_gui_to_flash &rArr; store_gui_page &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_print
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write_RecvProcess
</UL>

<P><STRONG><a name="[ee]"></a>App_Write_RecvProcess</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, app_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = App_Write_RecvProcess &rArr; App_RecvWriteScreenReq &rArr; Write_EPaper &rArr; store_usr_gui_to_flash &rArr; store_gui_page &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvWriteScreenReq
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvWriteFirmwareToflash
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_app_sync_pkt
</UL>

<P><STRONG><a name="[cc]"></a>RfSendPacket</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, pkt_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = RfSendPacket &rArr; A7139_Send_Msg &rArr; csma_detect &rArr; cca_detect &rArr; A7139_GetRSSI &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_awake_time_after_send
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfBuildHeader
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Send_Msg
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_print
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendBuzziEventRsp
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendTransparentMsg
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendQueryMsg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendRetransReqMsg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendEventRsp
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendJoinRequestMsg
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendNetworkSearchMsg
</UL>

<P><STRONG><a name="[f3]"></a>wake_up_msg_check</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, pkt_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wake_up_msg_check
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_pkt_handle
</UL>

<P><STRONG><a name="[f1]"></a>buss_pkt_handle</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, pkt_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = buss_pkt_handle &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_pkt_handle
</UL>

<P><STRONG><a name="[f2]"></a>wakeup_pkt_handle</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pkt_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wakeup_pkt_handle &rArr; wake_up_msg_check
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up_msg_check
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_pkt_handle
</UL>

<P><STRONG><a name="[f4]"></a>frame_pkt_handle</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, pkt_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = frame_pkt_handle &rArr; buss_pkt_handle &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_pkt_handle
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buss_pkt_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_recv_handle
</UL>

<P><STRONG><a name="[a7]"></a>sys_info_print</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_algo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sys_info_print &rArr; USART2_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_app_update
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendPacket
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRF_turn
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvWriteScreenReq
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvWriteFirmwareToflash
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvJoinRequestMsgRsp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvAckRsp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep_wakeBy_WorAndKey
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep_s
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_app_sync_pkt
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_Goto_sleep
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Run
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Listen_Run
</UL>

<P><STRONG><a name="[f5]"></a>get_random</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app_algo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_random &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csma_detect
</UL>

<P><STRONG><a name="[d7]"></a>rf_para_clean</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_algo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf_para_clean
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvQueryRsp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvAckRsp
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Standby_Run
</UL>

<P><STRONG><a name="[e1]"></a>get_ledn_on</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, app_algo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_ledn_on &rArr; Set_LedOn
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LedOn
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvQueryRsp
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_Goto_sleep
</UL>

<P><STRONG><a name="[3c]"></a>system_Goto_sleep</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, app_algo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = system_Goto_sleep &rArr; SystemSleep_s &rArr; generate_alarm_Interrupt &rArr; RTC_LSE_Config &rArr; RTC_setTime &rArr; RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ledn_on
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_print
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep_wakeBy_WorAndKey
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep_s
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>AppRF_turn</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, app_algo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AppRF_turn &rArr; A7139_SetChn &rArr; A7139_ReadPageA &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_RX
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_SetChn
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_print
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_alarm_Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvJoinRequestMsgRsp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvQueryRsp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvAckRsp
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_init_process
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Run
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Standby_Run
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Listen_Run
</UL>

<P><STRONG><a name="[38]"></a>App_init_process</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, app_algo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = App_init_process &rArr; Flash_SaveTagInfo &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_screen_id
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagInfo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_data_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRF_turn
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_SetSleepTime
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_show_msg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagState
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagInfo
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100us
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>len_on_timer_handler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_algo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = len_on_timer_handler &rArr; turn_all_led_off &rArr; Set_LedOff
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_all_led_off
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTime_handle
</UL>

<P><STRONG><a name="[4d]"></a>rf_on_timer_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_algo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf_on_timer_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTime_handle
</UL>

<P><STRONG><a name="[4e]"></a>longdata_wait_timer_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_algo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = longdata_wait_timer_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTime_handle
</UL>

<P><STRONG><a name="[fc]"></a>recv_data_reset_timer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_algo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = recv_data_reset_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_app_sync_pkt
</UL>

<P><STRONG><a name="[f0]"></a>set_awake_time_after_send</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_algo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_awake_time_after_send
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendPacket
</UL>

<P><STRONG><a name="[39]"></a>Key_detect_Run</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, app_algo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Key_detect_Run &rArr; key_sync_func
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_sync_func
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100us
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>App_GetEnergy</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, app_algo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = App_GetEnergy &rArr; Power_ADC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_self_test
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Maintance
</UL>

<P><STRONG><a name="[3d]"></a>App_Maintance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_algo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = App_Maintance &rArr; App_GetEnergy &rArr; Power_ADC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetEnergy
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>tag_app_update</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, app_algo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = tag_app_update &rArr; Flash_SaveTagInfo &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagInfo
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc16
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_print
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagInfo
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reset
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvAckRsp
</UL>

<P><STRONG><a name="[103]"></a>gui_backgroud_clean</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_gui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ea]"></a>sum_check_cal32</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sum_check_cal32
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvWriteFirmwareToflash
</UL>

<P><STRONG><a name="[b4]"></a>Write_GUI</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, app_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Write_GUI &rArr; Write_EPaper_GUI &rArr; lcd_sleep_mode &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EPaper
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper_GUI
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_EPaper
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_play_state
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_usr_gui
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_show_msg
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_tag_logo
</UL>

<P><STRONG><a name="[34]"></a>load_tag_logo</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = load_tag_logo &rArr; Write_GUI &rArr; Write_EPaper_GUI &rArr; lcd_sleep_mode &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_GUI
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_turn_to_default
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>dis_play_state</STRONG> (Thumb, 126 bytes, Stack size 368 bytes, app_gui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_GUI
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graph_Change
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[d9]"></a>restore_screen_context_data</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = restore_screen_context_data &rArr; read_backed_screen_context_from_flash &rArr; refresh_screen &rArr; Write_EPaper_RAM &rArr; Set_Column_Address &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_backed_screen_context_from_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_turn_to_default
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvAckRsp
</UL>

<P><STRONG><a name="[108]"></a>backup_current_screen_context_data</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, app_gui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagInfo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagInfo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_screen_context_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Indic_block
</UL>

<P><STRONG><a name="[dd]"></a>refresh_screen_by_code</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = refresh_screen_by_code &rArr; fill_disp_buffer &rArr; active_screen_type_function &rArr; app_func_InventoryMode_Enter &rArr; back_up_InventoryMode_information &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_disp_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvQueryRsp
</UL>

<P><STRONG><a name="[10b]"></a>screen_turn_to_default</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_gui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_screen_context_data
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_tag_logo
</UL>

<P><STRONG><a name="[29]"></a>turn_gui_pages</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = turn_gui_pages &rArr; load_usr_gui &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_usr_gui
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagState
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_key.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>AppState_Run</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, app_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = AppState_Run &rArr; App_Join_Run &rArr; item_show_msg &rArr; Write_GUI &rArr; Write_EPaper_GUI &rArr; lcd_sleep_mode &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRF_turn
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_show_msg
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_print
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep_s
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Standby_Run
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Listen_Run
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Join_Run
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Find_Run
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>tag_app_sync_pkt</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, app_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = tag_app_sync_pkt &rArr; App_Write_RecvProcess &rArr; App_RecvWriteScreenReq &rArr; Write_EPaper &rArr; store_usr_gui_to_flash &rArr; store_gui_page &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_reset_timer
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write_RecvProcess
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvStandByMsgRsp
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvJoinRequestMsgRsp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvNetworkSearchMsgRsp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_print
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>refresh_screen</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_wrscreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = refresh_screen &rArr; Write_EPaper_RAM &rArr; Set_Column_Address &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EPaper
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_disp_screen
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper_RAM
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_EPaper
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_backed_screen_context_from_flash
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_disp_buffer
</UL>

<P><STRONG><a name="[10a]"></a>fill_disp_buffer</STRONG> (Thumb, 1114 bytes, Stack size 880 bytes, app_wrscreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = fill_disp_buffer &rArr; active_screen_type_function &rArr; app_func_InventoryMode_Enter &rArr; back_up_InventoryMode_information &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graph_Change
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagInfo
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EPaper
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_screen_idx_tb_from_flash
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_screen_type_function
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Block
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_screen
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_screen_id
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_screen_by_code
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_InventoryMode_num
</UL>

<P><STRONG><a name="[ed]"></a>Write_EPaper</STRONG> (Thumb, 250 bytes, Stack size 296 bytes, app_wrscreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = Write_EPaper &rArr; store_usr_gui_to_flash &rArr; store_gui_page &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_screen_id
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graph_Change
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_print
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagState
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_usr_gui_to_flash
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_idx_info_to_flash
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_gui_screen_num_to_flash
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_screen
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_block_info_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvWriteScreenReq
</UL>

<P><STRONG><a name="[11e]"></a>Erase_Indic_block</STRONG> (Thumb, 234 bytes, Stack size 816 bytes, app_wrscreen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_current_screen_context_data
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EPaper
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_disp_screen
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_screen_idx_tb_from_flash
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper_RAM
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Block
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>

<P><STRONG><a name="[11f]"></a>Flash_WriteData</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagInfo
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gui_page
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveLastGUI
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagState
</UL>

<P><STRONG><a name="[fa]"></a>Flash_SaveTagInfo</STRONG> (Thumb, 76 bytes, Stack size 1040 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = Flash_SaveTagInfo &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_current_screen_context_data
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_join_NetWorkInfo
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_find_NetWorkInfo
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_app_update
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_init_process
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_software_flash_clean
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_idx_info_to_flash
</UL>

<P><STRONG><a name="[a3]"></a>Flash_ReadTagInfo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_ReadTagInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_current_screen_context_data
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_join_NetWorkInfo
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_find_NetWorkInfo
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_app_update
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_init_process
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_software_flash_clean
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_screen_idx_tb_from_flash
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_idx_info_to_flash
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_disp_buffer
</UL>

<P><STRONG><a name="[10c]"></a>Flash_SaveTagState</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_led_spark_paras
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ack_info
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_usr_gui
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_sleeptime_to_flash
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_reportflag_to_flash
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_func_InventoryMode_Enter
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_Confirm
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_software_flash_clean
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_InventoryMode_information
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_gui_screen_num_to_flash
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_gui_pages
</UL>

<P><STRONG><a name="[a4]"></a>Flash_ReadTagState</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_ReadTagState
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_led_spark_paras
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ack_info
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_usr_gui
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_sleeptime_to_flash
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_reportflag_to_flash
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_init_process
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_software_flash_clean
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_InventoryMode_information
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_gui_screen_num_to_flash
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_gui_pages
</UL>

<P><STRONG><a name="[115]"></a>Flash_Read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Indic_block
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_disp_buffer
</UL>

<P><STRONG><a name="[11a]"></a>Flash_Write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Flash_Write &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_software_copy
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_block_info_to_flash
</UL>

<P><STRONG><a name="[119]"></a>Flash_Erase</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Flash_Erase &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_software_copy
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_block_info_to_flash
</UL>

<P><STRONG><a name="[ce]"></a>update_find_NetWorkInfo</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = update_find_NetWorkInfo &rArr; Flash_SaveTagInfo &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagInfo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvNetworkSearchMsgRsp
</UL>

<P><STRONG><a name="[d2]"></a>update_join_NetWorkInfo</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = update_join_NetWorkInfo &rArr; Flash_SaveTagInfo &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagInfo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvJoinRequestMsgRsp
</UL>

<P><STRONG><a name="[114]"></a>restore_screen_idx_tb_from_flash</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = restore_screen_idx_tb_from_flash &rArr; Flash_ReadTagInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagInfo
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Indic_block
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_disp_buffer
</UL>

<P><STRONG><a name="[11b]"></a>backup_idx_info_to_flash</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = backup_idx_info_to_flash &rArr; Flash_SaveTagInfo &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagInfo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagInfo
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper
</UL>

<P><STRONG><a name="[d5]"></a>update_ack_info</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = update_ack_info &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagState
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagState
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvWriteFirmwareToflash
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvQueryRsp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvAckRsp
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Event_Report
</UL>

<P><STRONG><a name="[de]"></a>update_led_spark_paras</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = update_led_spark_paras &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagState
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagState
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvQueryRsp
</UL>

<P><STRONG><a name="[df]"></a>back_up_sleeptime_to_flash</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = back_up_sleeptime_to_flash &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagState
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagState
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvQueryRsp
</UL>

<P><STRONG><a name="[e0]"></a>back_up_reportflag_to_flash</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = back_up_reportflag_to_flash &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagState
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagState
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvQueryRsp
</UL>

<P><STRONG><a name="[125]"></a>back_up_InventoryMode_information</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = back_up_InventoryMode_information &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagState
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagState
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_func_InventoryMode_Quit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_func_InventoryMode_Enter
</UL>

<P><STRONG><a name="[11c]"></a>back_up_gui_screen_num_to_flash</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = back_up_gui_screen_num_to_flash &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagState
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagState
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper
</UL>

<P><STRONG><a name="[126]"></a>Flash_SaveLastGUI</STRONG> (Thumb, 76 bytes, Stack size 1040 bytes, app_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_screen_context_to_flash
</UL>

<P><STRONG><a name="[127]"></a>store_gui_page</STRONG> (Thumb, 86 bytes, Stack size 1056 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = store_gui_page &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_usr_gui_to_flash
</UL>

<P><STRONG><a name="[107]"></a>read_backed_screen_context_from_flash</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_backed_screen_context_from_flash &rArr; refresh_screen &rArr; Write_EPaper_RAM &rArr; Set_Column_Address &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_screen_context_data
</UL>

<P><STRONG><a name="[109]"></a>back_up_screen_context_to_flash</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveLastGUI
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_current_screen_context_data
</UL>

<P><STRONG><a name="[dc]"></a>load_usr_gui</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = load_usr_gui &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_GUI
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagState
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagState
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvQueryRsp
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_gui_pages
</UL>

<P><STRONG><a name="[11d]"></a>store_usr_gui_to_flash</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = store_usr_gui_to_flash &rArr; store_gui_page &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gui_page
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper
</UL>

<P><STRONG><a name="[128]"></a>store_software_flash_clean</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, app_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagInfo
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagState
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagInfo
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagState
</UL>

<P><STRONG><a name="[eb]"></a>store_software_copy</STRONG> (Thumb, 168 bytes, Stack size 1064 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = store_software_copy &rArr; Flash_Write &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvWriteFirmwareToflash
</UL>

<P><STRONG><a name="[37]"></a>key_state_change</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_func_Normal_Enter
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_func_InventoryMode_Quit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_func_InventoryMode_Enter
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_screen_type_function
</UL>

<P><STRONG><a name="[26]"></a>key_reset_system</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_reset_system
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_test_wait_key
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_self_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_key.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>put_key_to_set_all_led_off</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = put_key_to_set_all_led_off &rArr; Usr_Event_Report &rArr; update_ack_info &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Event_Report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_key.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>key_sync_func</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, app_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = key_sync_func
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_detect_Run
</UL>

<P><STRONG><a name="[12c]"></a>InventoryMode_math_mi</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_usr_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_mode
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_minus
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_Plus
</UL>

<P><STRONG><a name="[12a]"></a>update_curret_cur_offset_max</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_usr_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = update_curret_cur_offset_max &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_func_InventoryMode_Enter
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_Confirm
</UL>

<P><STRONG><a name="[fb]"></a>update_screen_id</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, app_usr_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = update_screen_id &rArr; fill_disp_buffer &rArr; active_screen_type_function &rArr; app_func_InventoryMode_Enter &rArr; back_up_InventoryMode_information &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_disp_buffer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_init_process
</UL>

<P><STRONG><a name="[12b]"></a>update_InventoryMode_num</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_usr_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = update_InventoryMode_num &rArr; fill_disp_buffer &rArr; active_screen_type_function &rArr; app_func_InventoryMode_Enter &rArr; back_up_InventoryMode_information &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_disp_buffer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_ReStart
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_mode
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_minus
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_Plus
</UL>

<P><STRONG><a name="[2c]"></a>InventoryMode_Key_Plus</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, app_usr_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = InventoryMode_Key_Plus &rArr; update_InventoryMode_num &rArr; fill_disp_buffer &rArr; active_screen_type_function &rArr; app_func_InventoryMode_Enter &rArr; back_up_InventoryMode_information &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_InventoryMode_num
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_math_mi
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_key.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>InventoryMode_Key_minus</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, app_usr_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = InventoryMode_Key_minus &rArr; update_InventoryMode_num &rArr; fill_disp_buffer &rArr; active_screen_type_function &rArr; app_func_InventoryMode_Enter &rArr; back_up_InventoryMode_information &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_InventoryMode_num
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_math_mi
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_key.o(.text)
</UL>
<P><STRONG><a name="[2e]"></a>InventoryMode_Key_mode</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, app_usr_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = InventoryMode_Key_mode &rArr; update_InventoryMode_num &rArr; fill_disp_buffer &rArr; active_screen_type_function &rArr; app_func_InventoryMode_Enter &rArr; back_up_InventoryMode_information &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_InventoryMode_num
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_math_mi
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_key.o(.text)
</UL>
<P><STRONG><a name="[129]"></a>Usr_Event_Report</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_usr_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Usr_Event_Report &rArr; update_ack_info &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ack_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_key_event_report
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_Confirm
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_key_to_set_all_led_off
</UL>

<P><STRONG><a name="[2b]"></a>InventoryMode_Key_Confirm</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_usr_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = InventoryMode_Key_Confirm &rArr; Usr_Event_Report &rArr; update_ack_info &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_curret_cur_offset_max
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Event_Report
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_key.o(.text)
</UL>
<P><STRONG><a name="[12d]"></a>InventoryMode_Key_ReStart</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_usr_function.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_InventoryMode_num
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>

<P><STRONG><a name="[12e]"></a>app_func_InventoryMode_Enter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_usr_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_func_InventoryMode_Enter &rArr; back_up_InventoryMode_information &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_change
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_curret_cur_offset_max
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_InventoryMode_information
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagState
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_screen_type_function
</UL>

<P><STRONG><a name="[12f]"></a>app_func_InventoryMode_Quit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_usr_function.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_change
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_InventoryMode_information
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>

<P><STRONG><a name="[130]"></a>app_func_Normal_Enter</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_usr_function.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_change
</UL>

<P><STRONG><a name="[116]"></a>active_screen_type_function</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_usr_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = active_screen_type_function &rArr; app_func_InventoryMode_Enter &rArr; back_up_InventoryMode_information &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_change
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_func_InventoryMode_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_disp_buffer
</UL>

<P><STRONG><a name="[2a]"></a>usr_key_event_report</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_usr_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = usr_key_event_report &rArr; Usr_Event_Report &rArr; update_ack_info &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Event_Report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_key.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>Init_EPaper</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, ep12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init_EPaper &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP12864_IO_RstBit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP12864_IO_SetBit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_out
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_GUI
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Indic_block
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_screen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_disp_buffer
</UL>

<P><STRONG><a name="[7e]"></a>lcd_sleep_mode</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ep12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_sleep_mode &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_out
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_disp_screen
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper_GUI
</UL>

<P><STRONG><a name="[113]"></a>update_disp_screen</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ep12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = update_disp_screen &rArr; lcd_sleep_mode &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_sleep_mode
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_out
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Indic_block
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_screen
</UL>

<P><STRONG><a name="[104]"></a>Clear_EPaper</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ep12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Clear_EPaper &rArr; Set_Column_Address &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Column_Address
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Page_Address
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_out
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_out
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_GUI
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_screen
</UL>

<P><STRONG><a name="[105]"></a>Write_EPaper_GUI</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, ep12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Write_EPaper_GUI &rArr; lcd_sleep_mode &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_sleep_mode
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Column_Address
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Page_Address
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_out
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_out
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_GUI
</UL>

<P><STRONG><a name="[117]"></a>Set_Block</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, ep12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_Block
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Indic_block
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_disp_buffer
</UL>

<P><STRONG><a name="[b3]"></a>Graph_Change</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, ep12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Graph_Change
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_play_state
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_qrcode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_show_msg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_disp_buffer
</UL>

<P><STRONG><a name="[112]"></a>Write_EPaper_RAM</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ep12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Write_EPaper_RAM &rArr; Set_Column_Address &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Column_Address
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Page_Address
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_out
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Indic_block
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_screen
</UL>

<P><STRONG><a name="[177]"></a>RCC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>RCC_HSEConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSE_Config
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[135]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f0xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[179]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>RCC_HSICmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>RCC_AdjustHSI14CalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>RCC_HSI14Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>RCC_HSI14ADCRequestCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>RCC_LSEConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSE_Config
</UL>

<P><STRONG><a name="[17e]"></a>RCC_LSEDriveConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>RCC_LSICmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>RCC_PLLCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>RCC_PREDIV1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>RCC_PCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>RCC_CECCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>RCC_I2CCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>RCC_USARTCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f0xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[9c]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSE_Config
</UL>

<P><STRONG><a name="[9d]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSE_Config
</UL>

<P><STRONG><a name="[18d]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_GPIO_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcc_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
</UL>

<P><STRONG><a name="[52]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmw_led_off
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_LED_On
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Set
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcc_Init
</UL>

<P><STRONG><a name="[53]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSE_Config
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcc_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
</UL>

<P><STRONG><a name="[146]"></a>RCC_AHBPeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[149]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[148]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
</UL>

<P><STRONG><a name="[18e]"></a>RCC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>RCC_GetITStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>FLASH_SetLatency</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>FLASH_Unlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagInfo
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gui_page
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveLastGUI
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagState
</UL>

<P><STRONG><a name="[124]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagInfo
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gui_page
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveLastGUI
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagState
</UL>

<P><STRONG><a name="[138]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[137]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, stm32f0xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WriteUser
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_SRAMParityConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_VDDAConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_BOOTConfig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_EnableWRP
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Erase
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[123]"></a>FLASH_ErasePage</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagInfo
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gui_page
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveLastGUI
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagState
</UL>

<P><STRONG><a name="[139]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[13a]"></a>FLASH_ProgramWord</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[120]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteData
</UL>

<P><STRONG><a name="[195]"></a>FLASH_OB_Unlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>FLASH_OB_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>FLASH_OB_Launch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>FLASH_OB_GetRDP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Erase
</UL>

<P><STRONG><a name="[13b]"></a>FLASH_OB_Erase</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetRDP
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[13d]"></a>FLASH_OB_EnableWRP</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[13e]"></a>FLASH_OB_RDPConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[13f]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[140]"></a>FLASH_OB_BOOTConfig</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[141]"></a>FLASH_OB_VDDAConfig</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[142]"></a>FLASH_OB_SRAMParityConfig</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[143]"></a>FLASH_OB_WriteUser</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[144]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[198]"></a>FLASH_OB_GetUser</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>FLASH_OB_GetWRP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>FLASH_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagInfo
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gui_page
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveLastGUI
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagState
</UL>

<P><STRONG><a name="[145]"></a>GPIO_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f0xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphResetCmd
</UL>

<P><STRONG><a name="[5d]"></a>GPIO_Init</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmw_led_off
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_LED_On
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_GPIO_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP12864_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP12865_IO_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSDIO_Output
</UL>

<P><STRONG><a name="[19c]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ReadValue
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_Read_Bit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_disp_screen
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper_GUI
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_EPaper
</UL>

<P><STRONG><a name="[19e]"></a>GPIO_ReadInputData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP12864_IO_SetBit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LedOn
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_SetBit
</UL>

<P><STRONG><a name="[57]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP12864_IO_RstBit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LedOff
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_ReSetBit
</UL>

<P><STRONG><a name="[1a1]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f0xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_LED_On
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
</UL>

<P><STRONG><a name="[147]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f0xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[99]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSE_Config
</UL>

<P><STRONG><a name="[1a3]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>PWR_PVDCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>PWR_EnterSleepMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f0xx_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep_wakeBy_WorAndKey
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep_s
</UL>

<P><STRONG><a name="[1a7]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f0xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>PWR_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>EXTI_DeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>EXTI_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f0xx_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSE_Config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Exti_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Exti_Init
</UL>

<P><STRONG><a name="[1ab]"></a>EXTI_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>EXTI_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>EXTI_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[45]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSE_Config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Exti_Init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Exti_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_RX_Exti
</UL>

<P><STRONG><a name="[1af]"></a>SYSCFG_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f0xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_syscfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Set
</UL>

<P><STRONG><a name="[1b0]"></a>SYSCFG_DMAChannelRemapConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>SYSCFG_I2CFastModePlusConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f0xx_syscfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Exti_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Exti_Init
</UL>

<P><STRONG><a name="[1b2]"></a>SYSCFG_BreakConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>SYSCFG_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>SYSCFG_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>NVIC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f0xx_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSE_Config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Exti_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_rf_rx
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Exti_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_RX_Exti
</UL>

<P><STRONG><a name="[1b5]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_misc.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_misc.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
</UL>

<P><STRONG><a name="[6d]"></a>ADC_Init</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
</UL>

<P><STRONG><a name="[6c]"></a>ADC_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
</UL>

<P><STRONG><a name="[72]"></a>ADC_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
</UL>

<P><STRONG><a name="[1b7]"></a>ADC_JitterCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>ADC_AutoPowerOffCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>ADC_WaitModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>ADC_AnalogWatchdogSingleChannelCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>ADC_TempSensorCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>ADC_VrefintCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
</UL>

<P><STRONG><a name="[70]"></a>ADC_VbatCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
</UL>

<P><STRONG><a name="[6e]"></a>ADC_ChannelConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
</UL>

<P><STRONG><a name="[1bf]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>ADC_OverrunModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>ADC_GetCalibrationFactor</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
</UL>

<P><STRONG><a name="[75]"></a>ADC_StopOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
</UL>

<P><STRONG><a name="[74]"></a>ADC_StartOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
</UL>

<P><STRONG><a name="[1c2]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>ADC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
</UL>

<P><STRONG><a name="[69]"></a>ADC_DMARequestModeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
</UL>

<P><STRONG><a name="[1c3]"></a>ADC_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
</UL>

<P><STRONG><a name="[1c4]"></a>ADC_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>ADC_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>DMA_DeInit</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
</UL>

<P><STRONG><a name="[67]"></a>DMA_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f0xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
</UL>

<P><STRONG><a name="[1c7]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
</UL>

<P><STRONG><a name="[1c8]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>DMA_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>DMA_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>DMA_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>USART_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f0xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[83]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, stm32f0xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
</UL>

<P><STRONG><a name="[1cf]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>USART_ClockInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
</UL>

<P><STRONG><a name="[1d2]"></a>USART_DirectionModeCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>USART_MSBFirstCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>USART_DataInvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>USART_InvPinCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>USART_SWAPPinCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>USART_ReceiverTimeOutCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>USART_SetReceiverTimeOut</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>USART_STOPModeCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>USART_StopModeWakeUpSourceConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>USART_AutoBaudRateCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>USART_AutoBaudRateConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>USART_AutoBaudRateNewRequest</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Send
</UL>

<P><STRONG><a name="[1e1]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>USART_MuteModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>USART_MuteModeWakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>USART_AddressDetectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>USART_LINCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>USART_SmartCardCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>USART_SetAutoRetryCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>USART_SetBlockLength</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>USART_IrDAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>USART_IrDACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>USART_DECmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>USART_DEPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>USART_SetDEAssertionTime</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>USART_SetDEDeassertionTime</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>USART_DMAReceptionErrorConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>USART_ITConfig</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>USART_RequestCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>USART_OverrunDetectionConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Send
</UL>

<P><STRONG><a name="[86]"></a>USART_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>USART_GetITStatus</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f0xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>a7139_GPIO_Init</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = a7139_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRF
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_Init
</UL>

<P><STRONG><a name="[14b]"></a>SetSDIO_Output</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadReg
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
</UL>

<P><STRONG><a name="[14c]"></a>A7139_IO_SetBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = A7139_IO_SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Send_Msg
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRF
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_recv_handle
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WriteID
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadReg
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WriteReg
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFEN_Action
</UL>

<P><STRONG><a name="[14d]"></a>A7139_IO_ReSetBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = A7139_IO_ReSetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Send_Msg
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRF
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_recv_handle
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WriteID
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadReg
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WriteReg
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFEN_Action
</UL>

<P><STRONG><a name="[14e]"></a>A7139_IO_Read_Bit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = A7139_IO_Read_Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO2_wait
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadReg
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
</UL>

<P><STRONG><a name="[14f]"></a>A7139_RX_Exti</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = A7139_RX_Exti &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_SetChn
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Send_Msg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_wake_up_from_sleep_mode
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_entry_sleep_mode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WOR_enable_by_sync
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WOR_disable
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_GetRSSI
</UL>

<P><STRONG><a name="[150]"></a>A7139_Exti_Init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = A7139_Exti_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRF
</UL>

<P><STRONG><a name="[151]"></a>RFEN_Action</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, a7139.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100us
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_ReSetBit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_SetBit
</UL>

<P><STRONG><a name="[152]"></a>StrobeCMD</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StrobeCMD &rArr; A7139_IO_ReSetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_ReSetBit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_RX
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_SetChn
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Send_Msg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_wake_up_from_sleep_mode
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_entry_sleep_mode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WOR_enable_by_sync
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WOR_disable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRF
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_recv_handle
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_GetRSSI
</UL>

<P><STRONG><a name="[153]"></a>ByteSend</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ByteSend &rArr; A7139_IO_ReSetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_ReSetBit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Send_Msg
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_recv_handle
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WriteID
</UL>

<P><STRONG><a name="[154]"></a>ByteRead</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ByteRead &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_Read_Bit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_ReSetBit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_SetBit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSDIO_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_recv_handle
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WriteID
</UL>

<P><STRONG><a name="[155]"></a>A7139_WriteReg</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = A7139_WriteReg &rArr; A7139_IO_ReSetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_ReSetBit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_SetChn
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WOR_enable_by_sync
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WOR_disable
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WOR_enable
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Cal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Config
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadPageB
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WritePageB
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadPageA
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WritePageA
</UL>

<P><STRONG><a name="[156]"></a>A7139_ReadReg</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_Read_Bit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_ReSetBit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_SetBit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSDIO_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_SetChn
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_recv_handle
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_GetRSSI
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Cal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Config
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadPageB
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadPageA
</UL>

<P><STRONG><a name="[157]"></a>A7139_WritePageA</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = A7139_WritePageA &rArr; A7139_WriteReg &rArr; A7139_IO_ReSetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WOR_enable_by_sync
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCOSC_Cal
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Cal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Config
</UL>

<P><STRONG><a name="[158]"></a>A7139_ReadPageA</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = A7139_ReadPageA &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadReg
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_SetChn
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRF
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCOSC_Cal
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Cal
</UL>

<P><STRONG><a name="[159]"></a>A7139_WritePageB</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = A7139_WritePageB &rArr; A7139_WriteReg &rArr; A7139_IO_ReSetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Config
</UL>

<P><STRONG><a name="[15a]"></a>A7139_ReadPageB</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, a7139.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadReg
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WriteReg
</UL>

<P><STRONG><a name="[15b]"></a>Err_State</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, a7139.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_State
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Err_State
</UL>

<P><STRONG><a name="[15c]"></a>A7139_Config</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = A7139_Config &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WritePageB
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WritePageA
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadReg
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRF
</UL>

<P><STRONG><a name="[15d]"></a>A7139_WriteID</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = A7139_WriteID &rArr; ByteRead &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_ReSetBit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRF
</UL>

<P><STRONG><a name="[15e]"></a>A7139_Cal</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = A7139_Cal &rArr; A7139_ReadPageA &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadPageA
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WritePageA
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadReg
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRF
</UL>

<P><STRONG><a name="[15f]"></a>RCOSC_Cal</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, a7139.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RCOSC_Cal &rArr; A7139_ReadPageA &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadPageA
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WritePageA
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WOR_enable_by_sync
</UL>

<P><STRONG><a name="[160]"></a>GIO2_wait</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, a7139_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GIO2_wait &rArr; A7139_IO_Read_Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_Read_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_RX
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_SetChn
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Send_Msg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_wake_up_from_sleep_mode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WOR_enable_by_sync
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WOR_disable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRF
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_recv_handle
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_GetRSSI
</UL>

<P><STRONG><a name="[161]"></a>A7139_GetRSSI</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, a7139_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = A7139_GetRSSI &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO2_wait
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadReg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_RX_Exti
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cca_detect
</UL>

<P><STRONG><a name="[a6]"></a>a7139_entry_sleep_mode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, a7139_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = a7139_entry_sleep_mode &rArr; A7139_RX_Exti &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100us
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_RX_Exti
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep_s
</UL>

<P><STRONG><a name="[a9]"></a>a7139_wake_up_from_sleep_mode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, a7139_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = a7139_wake_up_from_sleep_mode &rArr; A7139_RX_Exti &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100us
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO2_wait
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_RX_Exti
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep_s
</UL>

<P><STRONG><a name="[ab]"></a>WOR_enable_by_sync</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, a7139_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = WOR_enable_by_sync &rArr; RCOSC_Cal &rArr; A7139_ReadPageA &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO2_wait
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCOSC_Cal
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WritePageA
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WriteReg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_RX_Exti
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep_wakeBy_WorAndKey
</UL>

<P><STRONG><a name="[162]"></a>WOR_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, a7139_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WriteReg
</UL>

<P><STRONG><a name="[ac]"></a>WOR_disable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, a7139_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WOR_disable &rArr; A7139_RX_Exti &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100us
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO2_wait
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WriteReg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_RX_Exti
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep_wakeBy_WorAndKey
</UL>

<P><STRONG><a name="[d6]"></a>A7139_SetSleepTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, a7139_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvAckRsp
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_init_process
</UL>

<P><STRONG><a name="[c2]"></a>A7139_SetChn</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, a7139_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = A7139_SetChn &rArr; A7139_ReadPageA &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO2_wait
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadPageA
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadReg
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WriteReg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_RX_Exti
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRF_turn
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_self_test
</UL>

<P><STRONG><a name="[163]"></a>cca_detect</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, a7139_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = cca_detect &rArr; A7139_GetRSSI &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100us
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_GetRSSI
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csma_detect
</UL>

<P><STRONG><a name="[164]"></a>csma_detect</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, a7139_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = csma_detect &rArr; cca_detect &rArr; A7139_GetRSSI &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100us
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cca_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Send_Msg
</UL>

<P><STRONG><a name="[c3]"></a>A7139_Send_Msg</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, a7139_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = A7139_Send_Msg &rArr; csma_detect &rArr; cca_detect &rArr; A7139_GetRSSI &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc16
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csma_detect
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO2_wait
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_RX_Exti
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_ReSetBit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendPacket
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_self_test
</UL>

<P><STRONG><a name="[44]"></a>a7139_recv_handle</STRONG> (Thumb, 190 bytes, Stack size 88 bytes, a7139_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = a7139_recv_handle &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_pkt_handle
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cale_send_and_recv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc16
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO2_wait
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadReg
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_ReSetBit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>Enter_RX</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, a7139_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Enter_RX &rArr; GIO2_wait &rArr; A7139_IO_Read_Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO2_wait
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRF_turn
</UL>

<P><STRONG><a name="[80]"></a>InitRF</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, a7139_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = InitRF &rArr; A7139_WriteID &rArr; ByteRead &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_GPIO_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100us
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO2_wait
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Cal
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_WriteID
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Config
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_ReadPageA
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrobeCMD
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_Exti_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_ReSetBit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_IO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[1f9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buss_pkt_handle
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvAckRsp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_alarm_Interrupt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_self_test
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100us
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_curret_cur_offset_max
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_minus
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_Plus
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_disp_buffer
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_gui_pages
</UL>

<P><STRONG><a name="[1fa]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random
</UL>

<P><STRONG><a name="[f6]"></a>rand</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random
</UL>

<P><STRONG><a name="[d1]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvJoinRequestMsgRsp
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagInfo
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buss_pkt_handle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_led_spark_paras
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_software_copy
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_usr_gui
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvWriteScreenReq
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvWriteFirmwareToflash
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendTransparentMsg
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_show_msg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagState
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadTagInfo
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_self_test
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_tag_logo
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gui_page
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveLastGUI
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_screen_idx_tb_from_flash
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_idx_info_to_flash
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_block_info_to_flash
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_backed_screen_context_from_flash
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagState
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_play_state
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_show_msg
</UL>

<P><STRONG><a name="[1fb]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1fc]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_backgroud_clean
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_data_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yest_led
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_test_wait_key
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_test_print
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_self_test
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_init_process
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Run
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_disp_buffer
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_play_state
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagInfo
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_software_copy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_recv_time_dis
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sleep_time
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_test_print
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_show_msg
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7139_recv_handle
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_gui_page
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveLastGUI
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveTagState
</UL>

<P><STRONG><a name="[1fe]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ba]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_app_update
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvWriteScreenReq
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvWriteFirmwareToflash
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yest_led
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_recv_time_dis
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sleep_time
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_self_test
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_Goto_sleep
</UL>

<P><STRONG><a name="[c0]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cale_send_and_recv
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteData
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendPacket
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write_RecvProcess
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvWriteFirmwareToflash
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendBuzziEventRsp
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendTransparentMsg
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendQueryMsg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendRetransReqMsg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendEventRsp
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvStandByMsgRsp
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvJoinRequestMsgRsp
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendJoinRequestMsg
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvNetworkSearchMsgRsp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendNetworkSearchMsg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvQueryRsp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvAckRsp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetEnergy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_recv_time
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_recv_time_dis
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sleep_time
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_on_timer_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longdata_wait_timer_handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len_on_timer_handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTime_handle
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_self_test
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_Goto_sleep
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Maintance
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Run
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_func_InventoryMode_Quit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_InventoryMode_num
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_curret_cur_offset_max
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_mode
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_minus
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_Plus
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_disp_buffer
</UL>

<P><STRONG><a name="[1ff]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_uwrite4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_screen_id
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_reset_timer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_data_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_awake_time_after_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buss_pkt_handle
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_para_clean
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ledn_on
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_sleeptime_to_flash
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendPacket
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvWriteFirmwareToflash
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendJoinRequestMsg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvQueryRsp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvAckRsp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetEnergy
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_on_timer_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longdata_wait_timer_handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len_on_timer_handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_ADC_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTime_handle
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_app_sync_pkt
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_init_process
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Maintance
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Run
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_ReStart
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_InventoryMode_num
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_mode
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_minus
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InventoryMode_Key_Plus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_InventoryMode_information
</UL>

<P><STRONG><a name="[201]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetEnergy
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetEnergy
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetEnergy
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetEnergy
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[203]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[168]"></a>_float_epilogue</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[31]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[204]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[205]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[206]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__0sprintf$5</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[207]"></a>__1sprintf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5), UNUSED)

<P><STRONG><a name="[b7]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_app_update
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvWriteScreenReq
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvWriteFirmwareToflash
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yest_led
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_qrcode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_recv_time_dis
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sleep_time
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_test_print
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_self_test
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_Goto_sleep
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_init_process
</UL>

<P><STRONG><a name="[db]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_msg.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendEventRspMsg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_recvQueryRsp
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_detect_Run
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Run
</UL>

<P><STRONG><a name="[208]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[209]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[20a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3e]"></a>SetSysClock</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, system_stm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[49]"></a>SysTick_Config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[8d]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usr_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[8c]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usr_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[a0]"></a>Sleep_Init</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, usr_lowpower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Sleep_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep_wakeBy_WorAndKey
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep_s
</UL>

<P><STRONG><a name="[d4]"></a>App_recvAckRsp</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, app_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = App_recvAckRsp &rArr; tag_app_update &rArr; Flash_SaveTagInfo &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ack_info
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_app_update
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_para_clean
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_screen_context_data
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRF_turn
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7139_SetSleepTime
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_test_print
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_print
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvStandByMsgRsp
</UL>

<P><STRONG><a name="[da]"></a>App_recvQueryRsp</STRONG> (Thumb, 616 bytes, Stack size 24 bytes, app_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = App_recvQueryRsp &rArr; refresh_screen_by_code &rArr; fill_disp_buffer &rArr; active_screen_type_function &rArr; app_func_InventoryMode_Enter &rArr; back_up_InventoryMode_information &rArr; Flash_SaveTagState &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_led_spark_paras
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ack_info
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_para_clean
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_screen_by_code
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_usr_gui
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ledn_on
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_sleeptime_to_flash
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_up_reportflag_to_flash
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRF_turn
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_RecvStandByMsgRsp
</UL>

<P><STRONG><a name="[ef]"></a>RfBuildHeader</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, pkt_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RfBuildHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendPacket
</UL>

<P><STRONG><a name="[f9]"></a>App_data_Init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, app_algo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_data_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_init_process
</UL>

<P><STRONG><a name="[10f]"></a>App_Find_Run</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = App_Find_Run &rArr; item_show_msg &rArr; Write_GUI &rArr; Write_EPaper_GUI &rArr; lcd_sleep_mode &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendNetworkSearchMsg
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_show_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Run
</UL>

<P><STRONG><a name="[10d]"></a>App_Join_Run</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, app_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = App_Join_Run &rArr; item_show_msg &rArr; Write_GUI &rArr; Write_EPaper_GUI &rArr; lcd_sleep_mode &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendJoinRequestMsg
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_show_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Run
</UL>

<P><STRONG><a name="[10e]"></a>App_Listen_Run</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = App_Listen_Run &rArr; AppRF_turn &rArr; A7139_SetChn &rArr; A7139_ReadPageA &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRF_turn
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_recv_time
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_print
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Run
</UL>

<P><STRONG><a name="[110]"></a>App_Standby_Run</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, app_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = App_Standby_Run &rArr; App_SendEventRspMsg &rArr; App_SendBuzziEventRsp &rArr; RfSendPacket &rArr; A7139_Send_Msg &rArr; csma_detect &rArr; cca_detect &rArr; A7139_GetRSSI &rArr; A7139_ReadReg &rArr; SetSDIO_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_para_clean
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRF_turn
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendEventRspMsg
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendQueryMsg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SendRetransReqMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppState_Run
</UL>

<P><STRONG><a name="[118]"></a>back_up_block_info_to_flash</STRONG> (Thumb, 296 bytes, Stack size 560 bytes, app_wrscreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = back_up_block_info_to_flash &rArr; Flash_Write &rArr; Flash_WriteData &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper
</UL>

<P><STRONG><a name="[131]"></a>com_out</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ep12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP12864_IO_RstBit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP12864_IO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_sleep_mode
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EPaper
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Column_Address
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Page_Address
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_disp_screen
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper_GUI
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_EPaper
</UL>

<P><STRONG><a name="[132]"></a>data_out</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ep12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = data_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP12864_IO_RstBit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP12864_IO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper_RAM
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper_GUI
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_EPaper
</UL>

<P><STRONG><a name="[134]"></a>Set_Page_Address</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ep12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set_Page_Address &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_out
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper_RAM
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper_GUI
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_EPaper
</UL>

<P><STRONG><a name="[133]"></a>Set_Column_Address</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ep12864.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set_Column_Address &rArr; com_out &rArr; EP12864_IO_RstBit
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_out
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper_RAM
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_EPaper_GUI
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_EPaper
</UL>

<P><STRONG><a name="[16e]"></a>_printf_core</STRONG> (Thumb, 688 bytes, Stack size 96 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$5
</UL>

<P><STRONG><a name="[2f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf5.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0sprintf$5)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
